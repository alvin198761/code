package ${pName};
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.security.Principal;
import com.dl.webcenter.common.controller.PrincipalAction;
import com.dl.keep.common.util.MessageInfo;
import com.dl.keep.common.util.Page;
/**
* @类说明: ${cName}--前端控制器层
* @author: ${auth}
* @date : ${time}
**/
@RestController
@RequestMapping("api/${lowUpp}")
public class ${clsUpp}Action extends PrincipalAction {

	@SuppressWarnings("unused")
	private final Log logger = LogFactory.getLog(getClass());

	@Autowired
	private ${clsUpp}Bus bus; //${cName}Business层

    /**
    * @方法说明：  新增[${cName}]记录
    */
	@PostMapping("save")
	public RestfullResp<Integer> save(@RequestBody ${clsUpp} ${lowUpp}, Principal principal) {
		return new RestfullResp(bus.save(${lowUpp}));
	}
    
    /**
    * @方法说明：  新增[${cName}]记录
    */
    //@PostMapping("validate")
    //public RestfullResp<MessageInfo> validate(@RequestBody ${clsUpp}Cond cond, Principal principal) {
    //MessageInfo mi = new MessageInfo();
    ////此处写验证逻辑
    ////cond.setfield(...)
    ////int count=bus.queryCount(cond)
    ////if(count = 0){
    ////mi.setMessage(1, "记录个数不能为0!\
    ////}
    //return new RestfullResp(mi);
    //}

    /**
    * @方法说明： 删除${cName}记录
    */
	@DeleteMapping("delete")
	public RestfullResp<Integer> delete(@RequestParam("id") ${idType} id) {
		return new RestfullResp(bus.delete(id));
	}

    /**
    * @方法说明： 修改${cName}记录
    */
	@PostMapping("update")
	public RestfullResp<Integer> update(@RequestBody ${clsUpp} ${lowUpp}, Principal principal) {
		return new RestfullResp(bus.update(${lowUpp}));
	}

    /**
    * @方法说明： 按条件查询分页${cName}列表
    */
	@PostMapping("queryPage")
	public RestfullResp< Page<${clsUpp}>> queryPage(@RequestBody ${clsUpp}Cond cond, Principal principal){
		//cond.setBranch_id(getDefaultBranchId(principal));
		return new RestfullResp(bus.queryPage(cond));
	}

    /**
    * @方法说明： 按条件查询不分页${cName}列表
    */
    @PostMapping("queryList")
    public RestfullResp<List<${clsUpp}>> queryList(@RequestBody ${clsUpp}Cond cond, Principal principal){
        //cond.setBranch_id(getDefaultBranchId(principal));
        return new RestfullResp(bus.queryList(cond));
    }

    /**
    * @方法说明： 按主键查找单个${cName}记录
    */
	@GetMapping("findById")
	public RestfullResp<${clsUpp}> findById(@RequestParam("id") ${idType} id) {
		return new RestfullResp (bus.findById(id));
	}

    /**
    * @方法说明： 按条件查询${cName}记录个数
    */
	@PostMapping("queryCount")
	public RestfullResp<Long> queryCount(@RequestBody ${clsUpp}Cond cond){
		return new RestfullResp(bus.queryCount(cond));
	}
}