package ${pName};

import java.security.Principal;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import com.dl.appcenter.common.bean.SwaggerRespImpl;
import com.dl.appcenter.common.util.PrincipalAction;
import com.dl.keep.common.domain.app.${clsUpp};
import com.dl.keep.common.domain.app.${clsUpp}Cond;
import com.dl.keep.common.util.MessageInfo;
import com.dl.keep.common.util.Page;

/**
* @类说明: "[${cName}]app端Swagger控制器类"
* @author: ${auth}
* @date : ${time}
**/
@Api(value = "[${cName}]控制器", description = "[${cName}]相关操作")
@RestController
@RequestMapping("${lowUpp}")
public class ${clsUpp}Action extends PrincipalAction {

    @SuppressWarnings("unused")
	private final Log logger = LogFactory.getLog(getClass());
	
    @Autowired
	private ${clsUpp}Busbus; //注入[${cName}]业务逻辑类

    /**
     * @方法说明：  新增[${cName}]记录
     */
    @ApiOperation(value = "新增[${cName}]", notes = "返回影响记录行数")
    @ApiImplicitParams({ @ApiImplicitParam(name = "${lowUpp}", value = "[${cName}]对象", required = true, dataType = "${clsUpp}"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
    @PostMapping("save")
	public SwaggerRespImpl<Integer> save(@RequestBody ${clsUpp} ${lowUpp}, Principal principal) {
    		return new SwaggerRespImpl<>(bus.save(${lowUpp}));
    	}
    

    /**
    * @方法说明： 删除[${cName}]记录
    */
    @ApiOperation(value = "删除[${cName}]", notes = "返回影响记录行数")
    @ApiImplicitParams({ @ApiImplicitParam(name = "id", value = "[${cName}]主键", required = true, dataType = "${idType}", paramType = "query"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
    @PostMapping( "delete" )
    public SwaggerRespImpl<Integer> delete(@RequestParam("id") ${idType} id) {
            return new SwaggerRespImpl<>(bus.delete(new ${idType}[] { id }));
        }

    /**
    * @方法说明： 修改[${cName}]记录
    */
    @ApiOperation(value = "修改[${cName}]", notes = "返回影响记录行数")
    @ApiImplicitParams({ @ApiImplicitParam(name = "${lowUpp}", value = "[${cName}]对象", required = true, dataType = "${clsUpp}"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
    @PostMapping("update")
    public SwaggerRespImpl<Integer> update(@RequestBody ${clsUpp} ${lowUpp}, Principal principal) {
            return new SwaggerRespImpl<>(bus.update(${lowUpp}));
        }

    /**
    * @方法说明： 按条件查询分页[${cName}]列表
    */
    @ApiOperation(value = "按条件查询分页[${cName}]列表", notes = "返回分页[${cName}]列表")
    @ApiImplicitParams({ @ApiImplicitParam(name = "cond", value = "[${cName}]查询条件对象", required = true, dataType = "${clsUpp}Cond"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
    @PostMapping( "queryPage")
    public SwaggerRespImpl<Page<${clsUpp}>> queryPage(@RequestBody ${clsUpp}Cond cond, Principal principal) {
        // cond.setBranch_id(getSessionBranchId(principal));
        return new SwaggerRespImpl<>(bus.queryPage(cond));
    }

    /**
    * @方法说明： 按条件查询不分页[${cName}]列表
    */
    @ApiOperation(value = "按条件查询不分页[${cName}]列表", notes = "返回不分页[${cName}]列表")
    @ApiImplicitParams({ @ApiImplicitParam(name = "cond", value = "[${cName}]查询条件对象", required = true, dataType = "${clsUpp}Cond"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
	@PostMapping("queryList")
    public SwaggerRespImpl<List<${clsUpp}>> queryList(@RequestBody ${clsUpp}Cond cond, Principal principal) {
            // cond.setBranch_id(getSessionBranchId(principal));
    		return new SwaggerRespImpl<>(bus.queryList(cond));
    }
            
    /**
    * @方法说明： 按条件查询[${cName}]记录个数
    */
    @ApiOperation(value = "按条件查询[${cName}]记录个数", notes = "返回记录个数")
    @ApiImplicitParams({ @ApiImplicitParam(name = "cond", value = "[${cName}]查询条件对象", required = true, dataType = "${clsUpp}Cond"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
	@PostMapping( "queryCount")
	public SwaggerRespImpl<Long> queryCount(@RequestBody ${clsUpp}Cond cond) {
		return new SwaggerRespImpl<>(bus.queryCount(cond));
	}
                
    /**
    * @方法说明： 按主键查询单条[${cName}]记录
    */
    @ApiOperation(value = "按主键查询单个[${cName}]记录", notes = "返回单个[${cName}]对象")
    @ApiImplicitParams({ @ApiImplicitParam(name = "id", value = "[${cName}]的主键", required = true, dataType = "${idType}", paramType = "query"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
    @PostMapping( "findById")
    public SwaggerRespImpl<${clsUpp}> findById(@RequestParam("id") ${idType} id) {
    		return new SwaggerRespImpl<>(bus.findById(id));
    	}

    /**
    * @方法说明： 验证方法
    */
    @ApiOperation(value = "按条件验证方法[${cName}]相关相信息", notes = "返回验证结果")
    @ApiImplicitParams({ @ApiImplicitParam(name = "cond", value = "[${cName}]查询条件对象", required = true, dataType = "${clsUpp}Cond"),
    @ApiImplicitParam(name = "Authorization", value = "Token",required = true, dataType = "string", paramType = "header") })
	@PostMapping( "validate")
    public SwaggerRespImpl<Integer> validate(@RequestBody ${clsUpp}Cond cond, Principal principal) {
                // 此处写验证逻辑
                // cond.setfield(...)
                // int count=bus.queryCount(cond)
                // if(count = 0){
                // }
    		return new SwaggerRespImpl<>(1);
      }
}

